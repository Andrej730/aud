# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
workflows:
  version: 2
  build-tests:
    jobs:
      - build-3.8
      - build-latest
      - build-3.6
jobs:
  build-3.8: &build-template
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      #- image: circleci/python:3.6.9
      #- image: circleci/python:3.7.5
      - image: circleci/python:3.8.0
      #- image: circleci/python:2.7.17

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    parallelism: 4

    working_directory: ~/aud-rework

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            yes | sudo apt install software-properties-common || true
            yes | sudo apt update || true
            yes | sudo add-apt-repository ppa:mc3man/trusty-media || true
            yes | sudo apt update || true
            yes | sudo apt dist-upgrade || true

            sudo apt-get update && apt-get upgrade -y

            yes | sudo apt install ffmpeg || true

            pip install pytest pytest-reportlog
            pip install -r requirements.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
      # https://pytest.org
      # https://nose.readthedocs.io
      - run:
          name: run pytest
          command: |
            . venv/bin/activate
            pytest -v --junitxml=test-reports/test.xml
        #pytest -v --report-log=test-reports/test.json
      #- store_artifacts:
        #  path: mock
        #  destination: mock

      - store_test_results:
          path: test-reports

  build-latest:
    <<: *build-template
    docker:
      - image: circleci/python:latest
  build-3.6:
    <<: *build-template
    docker:
      - image: circleci/python:3.6.4
